import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { graphql, compose } from 'react-apollo';
import get from 'lodash.get';

// use toasts previously created for error messages
import { Type } from 'components/Shared/Toast/Toast';
import * as toastActions from 'components/Shared/Toast/toast.actions';
// import graphql query for the results and saved data
import RESULTS_LIST_QUERY from './graphql/resultsListQuery.graphql';
import Home from './Home';

// require the list data from the mock json generated by the mock schema
const withData = graphql(RESULTS_LIST_QUERY, {
  props: ({ ownProps, data: { viewer, loading, error } }) => {
    if (error) {
      ownProps.showToast(
        Type.DANGER,
        get(error, 'graphQLErrors[0].message', 'An error occurred while editing a site')
      );
    }
    return { // set props from our query results
      results: viewer && viewer.results,
      saved: viewer && viewer.saved,
      loading // check to see if the request is loading
    };
  }
});

// user redux to manage our toasts incase of an error retrieving the data
const withRedux = connect(
  null,
  dispatch => ({
    ...bindActionCreators(toastActions, dispatch)
  })
);

// use compose from react-apollo graphql client to combine the query data and redux
export default compose(
  withRedux,
  withData
)(Home);
